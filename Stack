--------------------------------------------------------------------------------
+main_loop()
+NOTE. gdb vuln-----------------------------------------------------------------
|break 95 (read from user starts)
|-------------------------------------------------------------------------------
--------------------------------------------------------------------------------
* Observation: 87 bytes before the start of rdbuf
- this can be checked by printing 88 %X (%08X might not work because of the rdbuf overflow)
|-%08X nor %8X is not enough to print out 88 words of memory
|-> Solution %n$X to create range query (i.e. update GenerateX)
|-> Updated GenerateX.py (From test, 50 90 query overflows but 50 89 does not)
|-> Just noticed that the number of read bytes is randomized, so it will be different from run to run:
- On 88th %X, it prints out 0x58252065 (='%X e') the very beginning of rdbuf
--------------------------------------------------------------------------------
* Observation: from "gdb" it can be confirmed taht locals are closely clustered
(gdb) p/a &user
$5 = 0xbfffef78
(gdb) p/a &pass
$6 = 0xbfffef7c
(gdb) p/a &ulen
$7 = 0xbfffef80
(gdb) p/a &plen
$8 = 0xbfffef84
(gdb) p/a &s
$9 = 0xbfffef88
(gdb) p/a &rdbuf
$10 = 0xbfffef8c
(gdb) p/a &tbuf
$11 = 0xbfffef94
(gdb) p/a &tbufsz
$12 = 0xbfffef90
(gdb) p/a &nread
$13 = 0xbfffef98
--------------------------------------------------------------------------------
* Observation: rdbuf on stack has lower index at lower address
(gdb) p &rdbuf[2]
$1 = 0xbfffea42 "%X\nZ\332\002P\006"
(gdb) p &rdbuf[3]
$2 = 0xbfffea43 "X\nZ\332\002P\006"
--------------------------------------------------------------------------------
* Observation: From the observation above, conclude that "e %X ..." starts printing from high addr to low addr
|-> this is false, because rdbuf is pointer to a location on a stack frame that is created by "alloca()" (man alloca)
|-> following is proof
(gdb) p &rdbuf[2]
$1 = 0xbfffea42 "%X\nZ\332\002P\006"
(gdb) p &rdbuf[3]
$2 = 0xbfffea43 "X\nZ\332\002P\006"
(gdb) p/a &rdbuf
$3 = 0xbfffef8c
(gdb) p/a &rdbuf[0]
$4 = 0xbfffea40
(gdb) p/a &rdbuf[1]
$5 = 0xbfffea41
(gdb) p/a &rdbuf[2]
$6 = 0xbfffea42
(gdb) p/a &rdbuf[3]
$7 = 0xbfffea43
(gdb) p/a &rdbuf[4]
$8 = 0xbfffea44
(gdb) p/a &rdbuf
$9 = 0xbfffef8c
(gdb) p/a &s
$10 = 0xbfffef88
(gdb) print rdbuf
$11 = 0xbfffea40 "e %X\nZ\332\002P\006"
--------------------------------------------------------------------------------
* Observation: location of the $ebp and $esp
(gdb) p $ebp
$1 = (void *) 0xbfffea78 
(gdb) p $esp 
$2 = (void *) 0xbfffe3c0
So basically, from $esp(closer to top of the stack) to $ebp(further from the top of the stack)
is the frame for main_loop()

HIGH ADDRESS!!!

--------------------------------------------------------------------------------

+0xbfffeaa8 
...
+0xbfffea80 0x5
+0xbfffea7c 0x08049f14 (RA=saved eip) 431
+0xbfffea78 0xbfffeaa8 (EBP) 430
+0xbfffea74 0x100
+0xbfffea70 0x100
+0xbfffea6c 0x86d9f100 (CANARY?) 427

*Local variables of main_loop()-------------------------------------------------
+0xbfffea68 nread
+0xbfffea64 tbuf
+0xbfffea60 tbufsz (=309)
+0xbfffea5c rdbuf (=s + 1021)
+0xbfffea58 s (=279)
+0xbfffea54 plen
+0xbfffea50 ulen
+0xbfffea4c pass
+0xbfffea48 user

*Unknown------------------------------------------------------------------------
+0xbfffea44
+0xbfffea40
+0xbfffea3c
+0xbfffea38
+0xbfffea34
+0xbfffea30
+0xbfffea2c
+0xbfffea28

* rdbuf-------------------------------------------------------------------------
+0xbfffea24 rdbuf[1300]
...
+0xbfffe5e0 rdbuf[208] (NOTE. 0xbfffe5e1=rdbuf[209] not, rdbuf[207]!!!)
...
+0xbfffe510 rdbuf[0]

--------------------------------------------------------------------------------
* Unknown
+0xbfffe50c
+0xbfffe508
+0xbfffe504
+0xbfffe500
+0xbfffe4fc
+0xbfffe4f8

* tbuf--------------------------------------------------------------------------
+0xbfffe4f4 ESP+   = tbuf[308]
...
+0xbfffe3d4 ESP+14 = 0x1e
+0xbfffe3d0 ESP+10 = 0x8
+0xbfffe3cc ESP+c  = 0xb7ff1eaa
+0xbfffe3c8 ESP+8  = 0x1e
+0xbfffe3c4 ESP+4  = 0xb7d6858
+0xbfffe3c0 ESP    = 0xb7fff000 (verifies with p/x *0xbfffe3c0 THIS IS "tbuf"!!! since its size is 309(tbufsz)
		   = tbuf[0]

* g() params--------------------------------------------------------------------
+0xbfffe3bc 0x4
+0xbfffe3b8 0xb7fd4e0c
+0xbfffe3b4 0x4
+0xbfffe3b0 0xb7fd4f0c
+0xbfffe3ac 0x08049d6f (RA)

* Inside g()--------------------------------------------------------------------
+0xbfffe3a8 0xbfffea78 (EBP)
+0xbfffe39c 0xbfffeac0 s2(\001)
+0xbfffe398 0x0804a239 s1(/bin/ls)
+0xbfffe394 0x0        authd
+0xbfffe390 0xb7fbbcc0 (ESP)

* auth() params-----------------------------------------------------------------
+0xbfffe38c 0x4        plen
+0xbfffe388 0xb7fd4e0c
+0xbfffe384 0x4
+0xbfffe380 0xb7fd4f0c
+0xbfffe37c 0x08048968 (RA)

* Inside auth()-----------------------------------------------------------------
+0xbfffe378 (EBP)
+0xbfffe374 0x0804a2f9 ???
+0xbfffe370 0xbf7bbcc0 ???
+0xbfffe36c 0xca30df00 ???
+0xbfffe368 0x4        l (LOCAL VAR)
+0xbfffe364 0xbfffe1d0 user (LOCAL VARIABLE)
+0xbfffe360 0xb7fbbcc0 ???
+0xbfffe35c 0xb7fd4f0c username
+0xbfffe358 0xb7fd4e0c pass
+0xbfffe354 0x4        ulen
+0xbfffe350 (ESP)

* Right before calling strcmp(user, pass, l)
│0x80488f4 <auth+139>    pushl  -0x10(%ebp) l
│0x80488f7 <auth+142>    pushl  -0x20(%ebp) pass
│0x80488fa <auth+145>    pushl  -0x14(%ebp) user


LOW ADDRESS!!!

